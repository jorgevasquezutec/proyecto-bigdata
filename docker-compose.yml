version: '3'
services:
  client:
    container_name: client_frontend
    hostname: client
    depends_on:
      - kafka
      - server
    build: 
      context : client/
      dockerfile: Dockerfile
    environment:
      PORT: 3002
      ALLOWED_ORIGIN : "*"
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      JWT_SECRET: ${JWT_SECRET}
      API_URL: ${API_URL}
    ports:
      - "3002:3002"
    networks:
      - bigdata_proyecto_network
  server:
    container_name: client_backend
    hostname: server
    depends_on:
      - kafka
    build: 
      context : server/
      dockerfile: Dockerfile
    environment:
      PORT: 3001
      ALLOWED_ORIGIN : "*"
      MONGO_URL: ${MONGO_URL}
      JWT_SECRET: ${JWT_SECRET}
      BROKERS: ${BROKERS}
      API_URL: ${API_URL}
      AWS_BUCKET_BAME: ${AWS_BUCKET_BAME}
      AWS_BUCKET_REGION: ${AWS_BUCKET_REGION}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_CLOUDWATCH_LOG_GROUP: ${AWS_CLOUDWATCH_LOG_GROUP}
      APP_ENV : ${APP_ENV}
    ports:
      - "3001:3001"
    networks:
      - bigdata_proyecto_network
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
        - bigdata_proyecto_network
    tmpfs: "/datalog"
  kafka:
    image: confluentinc/cp-server:7.2.1
    container_name: kafka-cloud
    hostname: kafka
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bigdata_proyecto_network
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_ADVERTISED_LISTENERS}
    networks:
      - bigdata_proyecto_network

  face-detector:
    container_name: face-detector
    hostname: face-detector
    depends_on:
      - kafka
    build: 
      context : face-detector/
      dockerfile: Dockerfile
    environment:
      BROKERS : ${BROKERS}
      ENV: ${APP_ENV}
    networks:
      - bigdata_proyecto_network
      
  face-spoofing:
    container_name: face-spoofing
    hostname: face-spoofing
    depends_on:
      - kafka
    build: 
      context : face-spoofing/
      dockerfile: Dockerfile
    environment:
      BROKERS : ${BROKERS}
      ENV: ${APP_ENV}
    networks:
      - bigdata_proyecto_network

networks:
  bigdata_proyecto_network:
    driver: bridge
